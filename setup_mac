#!/bin/sh

# Welcome to the Telos' laptop setup script
# This script is inspired by thoughtbot's laptop script
# It will install and configure most of the software you need to get started

# shellcheck disable=SC3043

# This helper
fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf list-all "$language" | grep -v "[a-z]" | tail -1)"

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

alias install_asdf_plugin=add_or_update_asdf_plugin
add_or_update_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  else
    asdf plugin-update "$name"
  fi
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

# shellcheck disable=SC2154
# trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

# Determine Homebrew prefix
arch="$(uname -m)"
if [ "$arch" = "arm64" ]; then
  HOMEBREW_PREFIX="/opt/homebrew"
else
  HOMEBREW_PREFIX="/usr/local"
fi

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != "$HOMEBREW_PREFIX/bin/zsh" ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

# checks architecture
if [ "$(uname -m)" = "arm64" ]
  then
  # checks if Rosetta is already installed
  if ! pkgutil --pkg-info=com.apple.pkg.RosettaUpdateAuto > /dev/null 2>&1
  then
    echo "Installing Rosetta"
    # Installs Rosetta2
    softwareupdate --install-rosetta --agree-to-license
  else
    echo "Rosetta is installed"
  fi
fi

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    append_to_zshrc "eval \"\$($HOMEBREW_PREFIX/bin/brew shellenv)\""

    export PATH="$HOMEBREW_PREFIX/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew tap --repair
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --verbose --file=- <<EOF
tap "homebrew/services"
tap "heroku/brew"

# Unix
brew "git"
brew "openssl"
# brew "rcm"
brew "tmux"
brew "zsh"

# Heroku
brew "heroku/brew/heroku"
brew "parity"

# GitHub
brew "gh"

# Image manipulation
brew "imagemagick"

# PDF Rendering
brew "poppler"

# Programming language prerequisites and package managers
brew "libyaml" # should come after openssl
brew "coreutils"
brew "yarn"

# Databases
brew "postgresql@14", restart_service: :changed
brew "redis", restart_service: :changed

# GUI tools
EOF

if [ ! -d "/Applications/Slack.app" ]; then
  brew install slack --cask
  else
  fancy_echo "slack already installed"
fi
if [ ! -d "/Applications/Krisp.app" ]; then
  brew install krisp --cask
  else
  fancy_echo "krisp already installed"
fi
if [ ! -d "/Applications/Tuple.app" ]; then
  brew install tuple --cask
  else
  fancy_echo "tuple already installed"
fi

fancy_echo "Update heroku binary ..."
brew unlink heroku
brew link --force heroku

PS3='Please enter 1 if you want to use asdf as version manager: '
options=("Yes" "No")
select opt in "${options[@]}"
do
    case $opt in
        "Yes")
            fancy_echo "Configuring asdf version manager ..."
            if [ ! -d "$HOME/.asdf" ]; then
              brew install asdf
              append_to_zshrc "source $(brew --prefix asdf)/libexec/asdf.sh" 1
            fi

            # shellcheck disable=SC1091
            . "$(brew --prefix asdf)/libexec/asdf.sh"
            add_or_update_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
            add_or_update_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"

            break
            ;;
        "No")
            # Installing rbenv
            fancy_echo "Configuring rbenv ruby version manager ..."

            if [ ! -d "$HOME/.rbenv" ]; then
              brew install rbenv
              echo 'eval "$(rbenv init -)"' >> ~/.zshrc
              else
              fancy_echo "rbenv already installed"
            fi

            # Installing nvm
            fancy_echo "Configuring nvm node version manager ..."

            if [ ! -d "$HOME/.nvm" ]; then
              brew install nvm
              mkdir ~/.nvm
            else
              fancy_echo "nvm already installed"
            fi

            export NVM_DIR=$HOME/.nvm
            append_to_zshrc "source $NVM_DIR/nvm.sh" 1
            . "$NVM_DIR/nvm.sh"

            break
            ;;
        *) echo "invalid option $REPLY";;
    esac
done

# Add parallel
gem update --system
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))
gem install rails

fancy_echo "Installing latest Ruby ..."
if [ $opt == 'No' ]; then
  rbenv install -l
else
  install_asdf_language "ruby"
fi

fancy_echo "Installing latest Node ..."
if [ $opt == 'No' ]; then
  nvm install --lts
else
  install_asdf_language "nodejs"
fi

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1091
  . "$HOME/.laptop.local"
fi